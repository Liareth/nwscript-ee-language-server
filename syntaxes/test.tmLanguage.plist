<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>Neverwinter Script</string>
    <key>scopeName</key>
    <string>source.nss</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#preprocessor-rule-enabled</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#preprocessor-rule-disabled</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#preprocessor-rule-conditional</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#predefined_macros</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#switch_statement</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(break|continue|do|else|for|goto|if|_Pragma|return|while)\b</string>
        <key>name</key>
        <string>keyword.control.c</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#storage_types</string>
      </dict>
      <dict>
        <key>match</key>
        <string>typedef</string>
        <key>name</key>
        <string>keyword.other.typedef.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(const|extern|register|restrict|static|volatile|inline)\b</string>
        <key>name</key>
        <string>storage.modifier.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\bk[A-Z]\w*\b</string>
        <key>name</key>
        <string>constant.other.variable.mac-classic.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\bg[A-Z]\w*\b</string>
        <key>name</key>
        <string>variable.other.readwrite.global.mac-classic.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\bs[A-Z]\w*\b</string>
        <key>name</key>
        <string>variable.other.readwrite.static.mac-classic.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(NULL|true|false|TRUE|FALSE)\b</string>
        <key>name</key>
        <string>constant.language.c</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#operators</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#numbers</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#strings</string>
      </dict>
      <dict>
        <key>name</key>
        <string>meta.preprocessor.macro.c</string>
        <key>begin</key>
        <string>((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))((#)\s*define\b)\s+((?&lt;!\w)[a-zA-Z_]\w*(?!\w))(?:(\()([^()\\]+)(\)))?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.define.c</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.preprocessor.c</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.c</string>
          </dict>
          <key>9</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?&lt;=[(,])\s*((?&lt;!\w)[a-zA-Z_]\w*(?!\w))\s*</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.preprocessor.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>,</string>
                <key>name</key>
                <string>punctuation.separator.parameters.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\.\.\.</string>
                <key>name</key>
                <string>ellipses.c punctuation.vararg-ellipses.variable.parameter.preprocessor.c</string>
              </dict>
            </array>
          </dict>
          <key>10</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\\)(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-rule-define-line-contents</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*(error|warning))\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.diagnostic.$3.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\\)(?=\n)</string>
        <key>name</key>
        <string>meta.preprocessor.diagnostic.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>[^'"]</string>
            <key>end</key>
            <string>(?&lt;!\\)(?=\s*\n)</string>
            <key>name</key>
            <string>string.unquoted.single.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*(include(?:_next)?|import))\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.$3.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|(?&lt;!\\)(?=\n)</string>
        <key>name</key>
        <string>meta.preprocessor.include.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#line_continuation_character</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.include.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.other.lt-gt.include.c</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>include</key>
        <string>#pragma-mark</string>
      </dict>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*line)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.line.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|(?&lt;!\\)(?=\n)</string>
        <key>name</key>
        <string>meta.preprocessor.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#strings</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numbers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line_continuation_character</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>^\s*(?:((#)\s*undef))\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.undef.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|(?&lt;!\\)(?=\n)</string>
        <key>name</key>
        <string>meta.preprocessor.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>[a-zA-Z_$][\w$]*</string>
            <key>name</key>
            <string>entity.name.function.preprocessor.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line_continuation_character</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>^\s*(?:((#)\s*pragma))\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.pragma.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|(?&lt;!\\)(?=\n)</string>
        <key>name</key>
        <string>meta.preprocessor.pragma.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#strings</string>
          </dict>
          <dict>
            <key>match</key>
            <string>[a-zA-Z_$][\w\-$]*</string>
            <key>name</key>
            <string>entity.other.attribute-name.pragma.preprocessor.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numbers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line_continuation_character</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\b</string>
        <key>name</key>
        <string>support.type.sys-types.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b</string>
        <key>name</key>
        <string>support.type.pthread.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>(?x) \b
(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t
|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t
|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t
|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t
|uintmax_t|uintmax_t)
\b</string>
        <key>name</key>
        <string>support.type.stdint.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b</string>
        <key>name</key>
        <string>support.constant.mac-classic.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>(?x) \b
(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam
|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr
|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber
|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64
|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32
|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr
|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)
\b</string>
        <key>name</key>
        <string>support.type.mac-classic.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b([A-Za-z0-9_]+_t)\b</string>
        <key>name</key>
        <string>support.type.posix-reserved.c</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#block</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#parens</string>
      </dict>
      <dict>
        <key>name</key>
        <string>meta.function.c</string>
        <key>begin</key>
        <string>(?&lt;!\w)(?!\s*(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_int_least64_t|atomic_int_least32_t|pthread_rwlockattr_t|atomic_uint_fast16_t|pthread_mutexattr_t|atomic_int_fast16_t|atomic_uint_fast8_t|atomic_int_fast64_t|atomic_int_least8_t|atomic_int_fast32_t|atomic_int_fast8_t|pthread_condattr_t|pthread_rwlock_t|atomic_uintptr_t|atomic_ptrdiff_t|atomic_uintmax_t|atomic_intmax_t|atomic_char32_t|atomic_intptr_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|uint_least8_t|int_least32_t|int_least16_t|pthread_key_t|uint_fast32_t|uint_fast64_t|uint_fast16_t|atomic_size_t|atomic_ushort|atomic_ullong|int_least64_t|atomic_ulong|int_least8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|memory_order|atomic_schar|atomic_uchar|atomic_short|atomic_llong|thread_local|atomic_bool|atomic_uint|atomic_long|int_fast8_t|suseconds_t|atomic_char|atomic_int|useconds_t|_Imaginary|uintmax_t|uintmax_t|in_addr_t|in_port_t|_Noreturn|blksize_t|pthread_t|uintptr_t|volatile|u_quad_t|blkcnt_t|intmax_t|intptr_t|_Complex|uint16_t|uint32_t|uint64_t|_Alignof|_Alignas|continue|unsigned|restrict|intmax_t|register|int64_t|qaddr_t|segsz_t|_Atomic|alignas|default|caddr_t|nlink_t|typedef|u_short|fixpt_t|clock_t|swblk_t|ssize_t|alignof|daddr_t|int16_t|int32_t|uint8_t|struct|mode_t|size_t|time_t|ushort|u_long|u_char|int8_t|double|signed|static|extern|inline|return|switch|xor_eq|and_eq|bitand|not_eq|sizeof|quad_t|uid_t|bitor|union|off_t|key_t|ino_t|compl|u_int|short|const|false|while|float|pid_t|break|_Bool|or_eq|div_t|dev_t|gid_t|id_t|long|case|goto|else|bool|auto|id_t|enum|uint|true|NULL|void|char|for|not|int|and|xor|do|or|if)\s*\()(?=[a-zA-Z_]\w*\s*\()</string>
        <key>end</key>
        <string>(?!\G)(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-innards</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>include</key>
        <string>#line_continuation_character</string>
      </dict>
      <dict>
        <key>name</key>
        <string>meta.bracket.square.access.c</string>
        <key>begin</key>
        <string>([a-zA-Z_][a-zA-Z_0-9]*|(?&lt;=[\]\)]))?(\[)(?!\])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.object.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.begin.bracket.square.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.end.bracket.square.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-call-innards</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>name</key>
        <string>storage.modifier.array.bracket.square.c</string>
        <key>match</key>
        <string>\[\s*\]</string>
      </dict>
      <dict>
        <key>match</key>
        <string>;</string>
        <key>name</key>
        <string>punctuation.terminator.statement.c</string>
      </dict>
      <dict>
        <key>match</key>
        <string>,</string>
        <key>name</key>
        <string>punctuation.separator.delimiter.c</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>access-method</key>
      <dict>
        <key>name</key>
        <string>meta.function-call.member.c</string>
        <key>begin</key>
        <string>([a-zA-Z_][a-zA-Z_0-9]*|(?&lt;=[\]\)]))\s*(?:(\.)|(-&gt;))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\s*(?:(?:\.)|(?:-&gt;)))*)\s*([a-zA-Z_][a-zA-Z_0-9]*)(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.object.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.dot-access.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.pointer-access.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\.</string>
                <key>name</key>
                <string>punctuation.separator.dot-access.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>-&gt;</string>
                <key>name</key>
                <string>punctuation.separator.pointer-access.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>[a-zA-Z_][a-zA-Z_0-9]*</string>
                <key>name</key>
                <string>variable.object.c</string>
              </dict>
              <dict>
                <key>name</key>
                <string>everything.else.c</string>
                <key>match</key>
                <string>.+</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.member.c</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.arguments.begin.bracket.round.function.member.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.arguments.end.bracket.round.function.member.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-call-innards</string>
          </dict>
        </array>
      </dict>
      <key>backslash_escapes</key>
      <dict>
        <key>match</key>
        <string>(?x)\\ (
\\			 |
[abefnprtv'"?]   |
[0-3][0-7]{,2}	 |
[4-7]\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )</string>
        <key>name</key>
        <string>constant.character.escape.c</string>
      </dict>
      <key>block</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.begin.bracket.curly.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>}|(?=\s*#\s*(?:elif|else|endif)\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.end.bracket.curly.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.block.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block_innards</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>block_innards</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-rule-enabled-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-rule-disabled-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-rule-conditional-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#c_function_call</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.initialization.c</string>
            <key>begin</key>
            <string>(?x)
(?:
  (?:
	(?=\s)(?&lt;!else|new|return)
	(?&lt;=\w) \s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name
  )
)
(
  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name
  |
  (?:(?&lt;=operator) (?:[-*&amp;&lt;&gt;=+!]+ | \(\) | \[\]))
)
\s*(\() # opening bracket</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.begin.bracket.round.initialization.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.end.bracket.round.initialization.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-call-innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.begin.bracket.curly.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>}|(?=\s*#\s*(?:elif|else|endif)\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.end.bracket.curly.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#block_innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#parens-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>c_conditional_context</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block_innards</string>
          </dict>
        </array>
      </dict>
      <key>c_function_call</key>
      <dict>
        <key>begin</key>
        <string>(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\s*\()
(?=
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\s*\(  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))\s*\(
)</string>
        <key>end</key>
        <string>(?&lt;=\))(?!\w)</string>
        <key>name</key>
        <string>meta.function-call.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-call-innards</string>
          </dict>
        </array>
      </dict>
      <key>case_statement</key>
      <dict>
        <key>name</key>
        <string>meta.conditional.case.c</string>
        <key>begin</key>
        <string>((?&gt;(?:(?:(?&gt;(?&lt;!\s)\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z))))((?&lt;!\w)case(?!\w))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.control.case.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(:)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.case.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#evaluation_context</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#c_conditional_context</string>
          </dict>
        </array>
      </dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.line.double-slash.documentation.c</string>
            <key>begin</key>
            <string>(?:^)(?&gt;\s*)(\/\/[!\/]+)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.documentation.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\n)(?&lt;!\\\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:callergraph|callgraph|else|endif|f\$|f\[|f\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\$|\#|&lt;|&gt;|%|"|\.|=|::|\||\-\-|\-\-\-)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@](?:a|em|e))\s+(\S+)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.italic.doxygen.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@]b)\s+(\S+)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.bold.doxygen.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@](?:c|p))\s+(\S+)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.inline.raw.string.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@]param)(?:\s*\[((?:,?\s*(?:in|out)\s*)+)\])?\s+(\b\w+\b)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>match</key>
                        <string>in|out</string>
                        <key>name</key>
                        <string>keyword.other.parameter.direction.$0.c</string>
                      </dict>
                    </array>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?:\b[A-Z]+:|@[a-z_]+:)</string>
                <key>name</key>
                <string>storage.type.class.gtkdoc</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(\/\*[!*]+(?=\s))(.+)([!*]*\*\/)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.documentation.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>(?&lt;=[\s*!\/])[\\@](?:callergraph|callgraph|else|endif|f\$|f\[|f\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\$|\#|&lt;|&gt;|%|"|\.|=|::|\||\-\-|\-\-\-)\b(?:\{[^}]*\})?</string>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>((?&lt;=[\s*!\/])[\\@](?:a|em|e))\s+(\S+)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>storage.type.class.doxygen.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>markup.italic.doxygen.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>((?&lt;=[\s*!\/])[\\@]b)\s+(\S+)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>storage.type.class.doxygen.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>markup.bold.doxygen.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>((?&lt;=[\s*!\/])[\\@](?:c|p))\s+(\S+)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>storage.type.class.doxygen.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>markup.inline.raw.string.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?&lt;=[\s*!\/])[\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\b(?:\{[^}]*\})?</string>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?&lt;=[\s*!\/])[\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\b(?:\{[^}]*\})?</string>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>((?&lt;=[\s*!\/])[\\@]param)(?:\s*\[((?:,?\s*(?:in|out)\s*)+)\])?\s+(\b\w+\b)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>storage.type.class.doxygen.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>in|out</string>
                            <key>name</key>
                            <string>keyword.other.parameter.direction.$0.c</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>variable.parameter.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?&lt;=[\s*!\/])[\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\b(?:\{[^}]*\})?</string>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?&lt;=[\s*!\/])[\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\b(?:\{[^}]*\})?</string>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?:\b[A-Z]+:|@[a-z_]+:)</string>
                    <key>name</key>
                    <string>storage.type.class.gtkdoc</string>
                  </dict>
                </array>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.documentation.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>comment.block.documentation.c</string>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.documentation.c</string>
            <key>begin</key>
            <string>((?&gt;\s*)\/\*[!*]+(?:(?:\n|$)|(?=\s)))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.documentation.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>([!*]*\*\/)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.documentation.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:callergraph|callgraph|else|endif|f\$|f\[|f\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\$|\#|&lt;|&gt;|%|"|\.|=|::|\||\-\-|\-\-\-)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@](?:a|em|e))\s+(\S+)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.italic.doxygen.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@]b)\s+(\S+)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.bold.doxygen.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@](?:c|p))\s+(\S+)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.inline.raw.string.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>((?&lt;=[\s*!\/])[\\@]param)(?:\s*\[((?:,?\s*(?:in|out)\s*)+)\])?\s+(\b\w+\b)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.class.doxygen.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>match</key>
                        <string>in|out</string>
                        <key>name</key>
                        <string>keyword.other.parameter.direction.$0.c</string>
                      </dict>
                    </array>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.c</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\s*!\/])[\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\b(?:\{[^}]*\})?</string>
                <key>name</key>
                <string>storage.type.class.doxygen.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?:\b[A-Z]+:|@[a-z_]+:)</string>
                <key>name</key>
                <string>storage.type.class.gtkdoc</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>^\/\* =(\s*.*?)\s*= \*\/$\n?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.toc-list.banner.block.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>comment.block.banner.c</string>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
            <key>begin</key>
            <string>(\/\*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\*\/)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.c</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>^\/\/ =(\s*.*?)\s*=$\n?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.toc-list.banner.line.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>comment.line.banner.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>((?:^[ \t]+)?)(?=\/\/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.c</string>
                <key>begin</key>
                <string>(\/\/)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\n)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#line_continuation_character</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>default_statement</key>
      <dict>
        <key>name</key>
        <string>meta.conditional.case.c</string>
        <key>begin</key>
        <string>((?&gt;(?:(?:(?&gt;(?&lt;!\s)\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z))))((?&lt;!\w)default(?!\w))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.control.default.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(:)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.colon.case.default.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#evaluation_context</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#c_conditional_context</string>
          </dict>
        </array>
      </dict>
      <key>disabled</key>
      <dict>
        <key>begin</key>
        <string>^\s*#\s*if(n?def)?\b.*$</string>
        <key>end</key>
        <string>^\s*#\s*endif\b</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#disabled</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#pragma-mark</string>
          </dict>
        </array>
      </dict>
      <key>evaluation_context</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-call-innards</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>function-call-innards</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage_types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\s*\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))
)
\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.arguments.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.arguments.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-call-innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-call-innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#block_innards</string>
          </dict>
        </array>
      </dict>
      <key>function-innards</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage_types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#vararg_ellipses</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.function.definition.parameters.c</string>
            <key>begin</key>
            <string>(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\s*\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))
)
\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parameters.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parameters.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#probably_a_parameter</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>inline_comment</key>
      <dict>
        <key>match</key>
        <string>(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>line_continuation_character</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(\\)\n</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.line-continuation.c</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>member_access</key>
      <dict>
        <key>match</key>
        <string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))((?:[a-zA-Z_]\w*\s*(?:(?:(?:\.\*|\.))|(?:(?:-&gt;\*|-&gt;)))\s*)*)\s*(\b(?!(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_int_least64_t|atomic_int_least32_t|pthread_rwlockattr_t|atomic_uint_fast16_t|pthread_mutexattr_t|atomic_int_fast16_t|atomic_uint_fast8_t|atomic_int_fast64_t|atomic_int_least8_t|atomic_int_fast32_t|atomic_int_fast8_t|pthread_condattr_t|atomic_uintptr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintmax_t|pthread_mutex_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_attr_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_cond_t|pthread_once_t|uint_fast64_t|uint_fast16_t|atomic_size_t|uint_least8_t|int_least64_t|int_least32_t|int_least16_t|pthread_key_t|atomic_ullong|atomic_ushort|uint_fast32_t|atomic_schar|atomic_short|uint_fast8_t|int_fast64_t|int_fast32_t|int_fast16_t|atomic_ulong|atomic_llong|int_least8_t|atomic_uchar|memory_order|suseconds_t|int_fast8_t|atomic_bool|atomic_char|atomic_uint|atomic_long|atomic_int|useconds_t|_Imaginary|blksize_t|pthread_t|in_addr_t|uintptr_t|in_port_t|uintmax_t|uintmax_t|blkcnt_t|uint16_t|unsigned|_Complex|uint32_t|intptr_t|intmax_t|intmax_t|uint64_t|u_quad_t|int64_t|int32_t|ssize_t|caddr_t|clock_t|uint8_t|u_short|swblk_t|segsz_t|int16_t|fixpt_t|daddr_t|nlink_t|qaddr_t|size_t|time_t|mode_t|signed|quad_t|ushort|u_long|u_char|double|int8_t|ino_t|uid_t|pid_t|_Bool|float|dev_t|div_t|short|gid_t|off_t|u_int|key_t|id_t|uint|long|void|char|bool|id_t|int)\b)[a-zA-Z_]\w*\b(?!\())</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.other.object.access.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.dot-access.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.pointer-access.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#member_access</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#method_access</string>
              </dict>
              <dict>
                <key>match</key>
                <string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.other.object.access.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.dot-access.c</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.pointer-access.c</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>variable.other.member.c</string>
          </dict>
        </dict>
      </dict>
      <key>method_access</key>
      <dict>
        <key>contentName</key>
        <string>meta.function-call.member.c</string>
        <key>begin</key>
        <string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))((?:[a-zA-Z_]\w*\s*(?:(?:(?:\.\*|\.))|(?:(?:-&gt;\*|-&gt;)))\s*)*)\s*([a-zA-Z_]\w*)(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.other.object.access.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.dot-access.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.pointer-access.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#member_access</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#method_access</string>
              </dict>
              <dict>
                <key>match</key>
                <string>((?:[a-zA-Z_]\w*|(?&lt;=\]|\)))\s*)(?:((?:\.\*|\.))|((?:-&gt;\*|-&gt;)))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.other.object.access.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.dot-access.c</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.pointer-access.c</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.member.c</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.arguments.begin.bracket.round.function.member.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.arguments.end.bracket.round.function.member.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-call-innards</string>
          </dict>
        </array>
      </dict>
      <key>numbers</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\w)\.?\d(?:(?:[0-9a-zA-Z_\.]|')|(?&lt;=[eEpP])[+-])*</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?=.)</string>
                <key>end</key>
                <string>$</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9a-fA-F])\.|\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?&lt;!')([pP])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.hexadecimal.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.c</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.hexadecimal.c</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.hexadecimal.c</string>
                      </dict>
                      <key>10</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.hexadecimal.c</string>
                      </dict>
                      <key>11</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.hexadecimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>12</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.floating-point.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9])\.|\.(?=[0-9])))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?&lt;!')([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.point.c</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.decimal.c</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.decimal.c</string>
                      </dict>
                      <key>10</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.decimal.c</string>
                      </dict>
                      <key>11</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.decimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>12</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.floating-point.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[bB])([01](?:[01]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.binary.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.binary.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0)((?:[0-7]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.octal.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.octal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?&lt;!')([pP])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.hexadecimal.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.hexadecimal.c</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.hexadecimal.c</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.hexadecimal.c</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.hexadecimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?&lt;!')([eE])(\+?)(\-?)((?:[0-9](?:[0-9]|(?:(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\w))?$</string>
                    <key>captures</key>
                    <dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.decimal.c</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.decimal.c</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.decimal.c</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.decimal.c</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric</string>
                          </dict>
                        </array>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.c</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?:(?:[0-9a-zA-Z_\.]|')|(?&lt;=[eEpP])[+-])+</string>
                    <key>name</key>
                    <string>invalid.illegal.constant.numeric</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;![\w$])(sizeof)(?![\w$])</string>
            <key>name</key>
            <string>keyword.operator.sizeof.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>--</string>
            <key>name</key>
            <string>keyword.operator.decrement.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\+\+</string>
            <key>name</key>
            <string>keyword.operator.increment.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>%=|\+=|-=|\*=|(?&lt;!\()/=</string>
            <key>name</key>
            <string>keyword.operator.assignment.compound.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|\|=</string>
            <key>name</key>
            <string>keyword.operator.assignment.compound.bitwise.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>&lt;&lt;|&gt;&gt;</string>
            <key>name</key>
            <string>keyword.operator.bitwise.shift.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>!=|&lt;=|&gt;=|==|&lt;|&gt;</string>
            <key>name</key>
            <string>keyword.operator.comparison.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>&amp;&amp;|!|\|\|</string>
            <key>name</key>
            <string>keyword.operator.logical.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>&amp;|\||\^|~</string>
            <key>name</key>
            <string>keyword.operator.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>=</string>
            <key>name</key>
            <string>keyword.operator.assignment.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>%|\*|/|-|\+</string>
            <key>name</key>
            <string>keyword.operator.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\?)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.ternary.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(:)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.ternary.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-call-innards</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>parens</key>
      <dict>
        <key>name</key>
        <string>meta.parens.c</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.parens.begin.bracket.round.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.parens.end.bracket.round.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>parens-block</key>
      <dict>
        <key>name</key>
        <string>meta.parens.block.c</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.parens.begin.bracket.round.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.parens.end.bracket.round.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#block_innards</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?-mix:(?&lt;!:):(?!:))</string>
            <key>name</key>
            <string>punctuation.range-based.c</string>
          </dict>
        </array>
      </dict>
      <key>pragma-mark</key>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.pragma.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.pragma.pragma-mark.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>entity.name.tag.pragma-mark.c</string>
          </dict>
        </dict>
        <key>match</key>
        <string>^\s*(((#)\s*pragma\s+mark)\s+(.*))</string>
        <key>name</key>
        <string>meta.section.c</string>
      </dict>
      <key>predefined_macros</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.other.preprocessor.macro.predefined.$1.c</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b__([A-Z_]+)__\b</string>
            <key>name</key>
            <string>entity.name.other.preprocessor.macro.predefined.probably.$1.c</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-conditional</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*((#)\s*if(?:n?def)?\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*endif\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-elif</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-else</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-disabled-elif</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*elif\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>^\s*#\s*(else|elif|endif)\b</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.stray-$1.c</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-conditional-block</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*((#)\s*if(?:n?def)?\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*endif\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-elif-block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-else-block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-disabled-elif</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*elif\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#block_innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>^\s*#\s*(else|elif|endif)\b</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.stray-$1.c</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-conditional-line</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?:\bdefined\b\s*$)|(?:\bdefined\b(?=\s*\(*\s*(?:(?!defined\b)[a-zA-Z_$][\w$]*\b)\s*\)*\s*(?:\n|//|/\*|\?|\:|&amp;&amp;|\|\||\\\s*\n)))</string>
            <key>name</key>
            <string>keyword.control.directive.conditional.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\bdefined\b</string>
            <key>name</key>
            <string>invalid.illegal.macro-name.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#strings</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numbers</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\?</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.ternary.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>:</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.ternary.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-conditional-line</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(NULL|true|false|TRUE|FALSE)\b</string>
            <key>name</key>
            <string>constant.language.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>[a-zA-Z_$][\w$]*</string>
            <key>name</key>
            <string>entity.name.function.preprocessor.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line_continuation_character</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)|(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-conditional-line</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-define-line-blocks</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.begin.bracket.curly.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>}|(?=\s*#\s*(?:elif|else|endif)\b)|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.end.bracket.curly.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-define-line-blocks</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-define-line-contents</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-rule-define-line-contents</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-define-line-contents</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#vararg_ellipses</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.begin.bracket.curly.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>}|(?=\s*#\s*(?:elif|else|endif)\b)|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.end.bracket.curly.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>meta.block.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-define-line-blocks</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>\(</string>
            <key>name</key>
            <string>punctuation.section.parens.begin.bracket.round.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\)</string>
            <key>name</key>
            <string>punctuation.section.parens.end.bracket.round.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\s*\()
(?=
  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\s*\(  # actual name
  |
  (?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))\s*\(
)</string>
            <key>end</key>
            <string>(?&lt;=\))(?!\w)|(?&lt;!\\)(?=\s*\n)</string>
            <key>name</key>
            <string>meta.function.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-define-line-functions</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_escaped_char</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string_placeholder</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_escaped_char</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#method_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-define-line-functions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage_types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#vararg_ellipses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member_access</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\s*\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
|
(?:(?&lt;=operator)(?:[-*&amp;&lt;&gt;=+!]+|\(\)|\[\]))
)
\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.arguments.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.arguments.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-define-line-functions</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.begin.bracket.round.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))|(?&lt;!\\)(?=\s*\n)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.parens.end.bracket.round.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-define-line-functions</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-rule-define-line-contents</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-disabled</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*((#)\s*if\b)(?=\s*\(*\b0+\b\)*\s*(?:$|//|/\*))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*endif\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-elif</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-else</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-disabled-elif</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*elif\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:elif|else|endif)\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>begin</key>
                    <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                    <key>end</key>
                    <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#preprocessor-rule-conditional-line</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\n</string>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.if-branch.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-disabled-block</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*((#)\s*if\b)(?=\s*\(*\b0+\b\)*\s*(?:$|//|/\*))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*endif\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-elif-block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-enabled-else-block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-disabled-elif</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*elif\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:elif|else|endif)\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>begin</key>
                    <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                    <key>end</key>
                    <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#preprocessor-rule-conditional-line</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#block_innards</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\n</string>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.if-branch.in-block.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-disabled-elif</key>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*elif\b)(?=\s*\(*\b0+\b\)*\s*(?:$|//|/\*))</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.c</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.conditional.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=^\s*((#)\s*(?:elif|else|endif)\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
            <key>end</key>
            <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
            <key>name</key>
            <string>meta.preprocessor.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-conditional-line</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\n</string>
            <key>end</key>
            <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
            <key>contentName</key>
            <string>comment.block.preprocessor.elif-branch.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#disabled</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#pragma-mark</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-enabled</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*((#)\s*if\b)(?=\s*\(*\b0*1\b\)*\s*(?:$|//|/\*))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.preprocessor.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*endif\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*else\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*endif\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.else-branch.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*elif\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.if-branch.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\n</string>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-enabled-block</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^\s*((#)\s*if\b)(?=\s*\(*\b0*1\b\)*\s*(?:$|//|/\*))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>^\s*((#)\s*endif\b)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.c</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.directive.conditional.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.directive.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
                <key>end</key>
                <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?=\n)</string>
                <key>name</key>
                <string>meta.preprocessor.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-conditional-line</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*else\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*endif\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.else-branch.in-block.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*elif\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.if-branch.in-block.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\n</string>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#block_innards</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-enabled-elif</key>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*elif\b)(?=\s*\(*\b0*1\b\)*\s*(?:$|//|/\*))</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.c</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.conditional.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=^\s*((#)\s*endif\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
            <key>end</key>
            <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
            <key>name</key>
            <string>meta.preprocessor.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-conditional-line</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\n</string>
            <key>end</key>
            <string>(?=^\s*((#)\s*(?:endif)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*(else)\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*endif\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.elif-branch.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*(elif)\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.elif-branch.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-enabled-elif-block</key>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*elif\b)(?=\s*\(*\b0*1\b\)*\s*(?:$|//|/\*))</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.c</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.conditional.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=^\s*((#)\s*endif\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\G(?=.)(?!//|/\*(?!.*\\\s*\n))</string>
            <key>end</key>
            <string>(?=//)|(?=/\*(?!.*\\\s*\n))|(?&lt;!\\)(?=\n)</string>
            <key>name</key>
            <string>meta.preprocessor.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-rule-conditional-line</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\n</string>
            <key>end</key>
            <string>(?=^\s*((#)\s*(?:endif)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*(else)\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*endif\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.elif-branch.in-block.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>^\s*((#)\s*(elif)\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.preprocessor.c</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.directive.conditional.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.directive.c</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=^\s*((#)\s*(?:else|elif|endif)\b))</string>
                <key>contentName</key>
                <string>comment.block.preprocessor.elif-branch.c</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#disabled</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#block_innards</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-enabled-else</key>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*else\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.c</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.conditional.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=^\s*((#)\s*endif\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-rule-enabled-else-block</key>
      <dict>
        <key>begin</key>
        <string>^\s*((#)\s*else\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.c</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.conditional.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.directive.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=^\s*((#)\s*endif\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#block_innards</string>
          </dict>
        </array>
      </dict>
      <key>probably_a_parameter</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=(?:[a-zA-Z_0-9] |[&amp;*&gt;\]\)]))\s*([a-zA-Z_]\w*)\s*(?=(?:\[\]\s*)?(?:,|\)))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.probably.c</string>
          </dict>
        </dict>
      </dict>
      <key>static_assert</key>
      <dict>
        <key>begin</key>
        <string>((?&gt;(?:(?:(?&gt;(?&lt;!\s)\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z))))((?&lt;!\w)static_assert|_Static_assert(?!\w))((?&gt;(?:(?:(?&gt;(?&lt;!\s)\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z))))(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.other.static_assert.c</string>
          </dict>
          <key>6</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>9</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>10</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.arguments.begin.bracket.round.static_assert.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.arguments.end.bracket.round.static_assert.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.static_assert.message.c</string>
            <key>begin</key>
            <string>(,)\s*(?=(?:L|u8|u|U\s*\")?)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.delimiter.comma.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_context</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#evaluation_context</string>
          </dict>
        </array>
      </dict>
      <key>storage_types</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?-mix:(?&lt;!\w)(?:unsigned|signed|double|_Bool|short|float|long|void|char|bool|int)(?!\w))</string>
            <key>name</key>
            <string>storage.type.built-in.primitive.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?-mix:(?&lt;!\w)(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|pthread_rwlockattr_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_uint_fast16_t|atomic_int_least64_t|atomic_int_least32_t|atomic_int_least16_t|atomic_uint_least8_t|atomic_uint_fast8_t|atomic_int_least8_t|atomic_int_fast16_t|pthread_mutexattr_t|atomic_int_fast32_t|atomic_int_fast64_t|atomic_int_fast8_t|pthread_condattr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintptr_t|atomic_uintmax_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|int_least32_t|pthread_key_t|int_least16_t|int_least64_t|uint_least8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|atomic_ushort|atomic_ullong|atomic_size_t|int_fast16_t|int_fast64_t|uint_fast8_t|atomic_short|atomic_uchar|atomic_schar|int_least8_t|memory_order|atomic_llong|atomic_ulong|int_fast32_t|atomic_long|atomic_uint|atomic_char|int_fast8_t|suseconds_t|atomic_bool|atomic_int|_Imaginary|useconds_t|in_port_t|uintmax_t|uintmax_t|pthread_t|blksize_t|in_addr_t|uintptr_t|blkcnt_t|uint16_t|uint32_t|uint64_t|u_quad_t|_Complex|intptr_t|intmax_t|intmax_t|segsz_t|u_short|nlink_t|uint8_t|int64_t|int32_t|int16_t|fixpt_t|daddr_t|caddr_t|qaddr_t|ssize_t|clock_t|swblk_t|u_long|mode_t|int8_t|time_t|ushort|u_char|quad_t|size_t|pid_t|gid_t|uid_t|dev_t|div_t|off_t|u_int|key_t|ino_t|uint|id_t|id_t)(?!\w))</string>
            <key>name</key>
            <string>storage.type.built-in.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?-mix:\b(enum|struct|union)\b)</string>
            <key>name</key>
            <string>storage.type.$1.c</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.asm.c</string>
            <key>begin</key>
            <string>(\b(?:__asm__|asm)\b)\s*((?:volatile)?)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.asm.c</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?:^)((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))(?:\n|$)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#inline_comment</string>
                      </dict>
                    </array>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>comment.block.c punctuation.definition.comment.begin.c</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>comment.block.c</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>match</key>
                        <string>\*\/</string>
                        <key>name</key>
                        <string>comment.block.c punctuation.definition.comment.end.c</string>
                      </dict>
                      <dict>
                        <key>match</key>
                        <string>\*</string>
                        <key>name</key>
                        <string>comment.block.c</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))\()</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.section.parens.begin.bracket.round.assembly.c</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#inline_comment</string>
                      </dict>
                    </array>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>comment.block.c punctuation.definition.comment.begin.c</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>comment.block.c</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>match</key>
                        <string>\*\/</string>
                        <key>name</key>
                        <string>comment.block.c punctuation.definition.comment.end.c</string>
                      </dict>
                      <dict>
                        <key>match</key>
                        <string>\*</string>
                        <key>name</key>
                        <string>comment.block.c</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
                <key>end</key>
                <string>(\))</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.section.parens.end.bracket.round.assembly.c</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>string.quoted.double.c</string>
                    <key>contentName</key>
                    <string>meta.embedded.assembly.c</string>
                    <key>begin</key>
                    <string>(R?)(")</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>meta.encoding.c</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.definition.string.begin.assembly.c</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(")</string>
                    <key>endCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.definition.string.end.assembly.c</string>
                      </dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#backslash_escapes</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>#string_escaped_char</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>begin</key>
                    <string>(\()</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.section.parens.begin.bracket.round.assembly.inner.c</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(\))</string>
                    <key>endCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.section.parens.end.bracket.round.assembly.inner.c</string>
                      </dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#evaluation_context</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>\[((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))([a-zA-Z_]\w*)((?:(?:(?&gt;\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+?|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z)))\]</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>include</key>
                            <string>#inline_comment</string>
                          </dict>
                        </array>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>comment.block.c punctuation.definition.comment.begin.c</string>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>comment.block.c</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>\*\/</string>
                            <key>name</key>
                            <string>comment.block.c punctuation.definition.comment.end.c</string>
                          </dict>
                          <dict>
                            <key>match</key>
                            <string>\*</string>
                            <key>name</key>
                            <string>comment.block.c</string>
                          </dict>
                        </array>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>variable.other.asm.label.c</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>include</key>
                            <string>#inline_comment</string>
                          </dict>
                        </array>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>comment.block.c punctuation.definition.comment.begin.c</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>comment.block.c</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>\*\/</string>
                            <key>name</key>
                            <string>comment.block.c punctuation.definition.comment.end.c</string>
                          </dict>
                          <dict>
                            <key>match</key>
                            <string>\*</string>
                            <key>name</key>
                            <string>comment.block.c</string>
                          </dict>
                        </array>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>:</string>
                    <key>name</key>
                    <string>punctuation.separator.delimiter.colon.assembly.c</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#comments</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>string_escaped_char</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?x)\\ (
\\			 |
[abefnprtv'"?]   |
[0-3]\d{,2}	 |
[4-7]\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )</string>
            <key>name</key>
            <string>constant.character.escape.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\.</string>
            <key>name</key>
            <string>invalid.illegal.unknown-escape.c</string>
          </dict>
        </array>
      </dict>
      <key>string_placeholder</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?x) %
(\d+\$)?						   # field (argument #)
[#0\- +']*						  # flags
[,;:_]?							  # separator character (AltiVec)
((-?\d+)|\*(-?\d+\$)?)?		  # minimum field width
(\.((-?\d+)|\*(-?\d+\$)?)?)?	# precision
(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
[diouxXDOUeEfFgGaACcSspn%]		   # conversion type</string>
            <key>name</key>
            <string>constant.other.placeholder.c</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(%)(?!"\s*(PRI|SCN))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.placeholder.c</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>strings</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_escaped_char</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string_placeholder</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.c</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_escaped_char</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#line_continuation_character</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>switch_conditional_parentheses</key>
      <dict>
        <key>name</key>
        <string>meta.conditional.switch.c</string>
        <key>begin</key>
        <string>((?&gt;(?:(?:(?&gt;(?&lt;!\s)\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z))))(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.parens.begin.bracket.round.conditional.switch.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.parens.end.bracket.round.conditional.switch.c</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#evaluation_context</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#c_conditional_context</string>
          </dict>
        </array>
      </dict>
      <key>switch_statement</key>
      <dict>
        <key>name</key>
        <string>meta.block.switch.c</string>
        <key>begin</key>
        <string>(((?&gt;(?:(?:(?&gt;(?&lt;!\s)\s+)|(\/\*)((?&gt;(?:[^\*]|(?&gt;\*+)[^\/])*)((?&gt;\*+)\/)))+|(?:(?:(?:(?:\b|(?&lt;=\W))|(?=\W))|\A)|\Z))))((?&lt;!\w)switch(?!\w)))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.head.switch.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#inline_comment</string>
              </dict>
            </array>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment.block.c punctuation.definition.comment.begin.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>comment.block.c</string>
          </dict>
          <key>5</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\*\/</string>
                <key>name</key>
                <string>comment.block.c punctuation.definition.comment.end.c</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\*</string>
                <key>name</key>
                <string>comment.block.c</string>
              </dict>
            </array>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>keyword.control.switch.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?:(?&lt;=\}|%&gt;|\?\?&gt;)|(?=[;&gt;\[\]=]))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.head.switch.c</string>
            <key>begin</key>
            <string>\G ?</string>
            <key>end</key>
            <string>((?:\{|&lt;%|\?\?&lt;|(?=;)))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.begin.bracket.curly.switch.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#switch_conditional_parentheses</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.body.switch.c</string>
            <key>begin</key>
            <string>(?&lt;=\{|&lt;%|\?\?&lt;)</string>
            <key>end</key>
            <string>(\}|%&gt;|\?\?&gt;)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.block.end.bracket.curly.switch.c</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#default_statement</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#case_statement</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#block_innards</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.tail.switch.c</string>
            <key>begin</key>
            <string>(?&lt;=\}|%&gt;|\?\?&gt;)[\s\n]*</string>
            <key>end</key>
            <string>[\s\n]*(?=;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>vararg_ellipses</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\.\.\.(?!\.)</string>
        <key>name</key>
        <string>punctuation.vararg-ellipses.c</string>
      </dict>
    </dict>
  </dict>
</plist>
